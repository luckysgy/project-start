server:
  port: 9091
#rocketmq配置
rocketmq:
  name-server: 192.168.190.28:39876
  # 生产者配置
  producer:
    # 发送同一类消息的设置为同一个group，保证唯一
    maxMessageSize: 4096
    # 发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
    group: test
  # 消费者配置
  consumer:
    group: test

spring:
  profiles:
    active: dev,mq
  application:
    # 应用名称
    name: order
  main:
    allow-bean-definition-overriding: true
  flyway:
    # 启用或禁用 flyway
    enabled: false
    # flyway 的 clean 命令会删除指定 schema 下的所有 table, 生产务必禁掉。这个默认值是 false 理论上作为默认配置是不科学的。
    clean-disabled: true
    # SQL 脚本的目录,多个路径使用逗号分隔 默认值 classpath:db/migration
    locations: classpath:db/migration
    #  metadata 版本控制信息表 默认 flyway_schema_history
    # 多个系统公用一个 数据库 schema 时配置spring.flyway.table 为不同的系统设置不同的
    # metadata 表名而不使用缺省值 flyway_schema_history 。
    table: flyway_schema_history
    # 如果没有 flyway_schema_history 这个 metadata 表， 在执行 flyway migrate 命令之前, 必须先执行 flyway baseline 命令
    # 设置为 true 后 flyway 将在需要 baseline 的时候, 自动执行一次 baseline。
    baseline-on-migrate: true
    # 指定 baseline 的版本号,默认值为 1, 低于该版本号的 SQL 文件, migrate 时会被忽略
    baseline-version: 1.0
    # 字符编码 默认 UTF-8
    encoding: UTF-8
    # 是否允许不按顺序迁移 开发建议 true  生产建议 false
    out-of-order: false
    # 需要 flyway 管控的 schema list,这里我们配置为flyway  缺省的话, 使用spring.datasource.url 配置的那个 schema,
    # 可以指定多个schema, 但仅会在第一个schema下建立 metadata 表, 也仅在第一个schema应用migration sql 脚本.
    # 但flyway Clean 命令会依次在这些schema下都执行一遍. 所以 确保生产 spring.flyway.clean-disabled 为 true
    # schemas: flyway
    # 执行迁移时是否自动调用验证   当你的 版本不符合逻辑 比如 你先执行了 DML 而没有 对应的DDL 会抛出异常
    validate-on-migrate: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    init-db: app
    url: jdbc:mysql://192.168.190.35:33336/project?useUnicode=true&characterEncoding=utf8&characterSetResults=utf8&&serverTimezone=Asia/Shanghai
    userName: root
    password: dev_alibaba@1688
    # 使用我们自己的druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 初始化连接个数
      initialSize: 10
      # 最小连接个数
      minIdle: 5
      # 最大连接个数
      maxActive: 500
      # 最大等待时间
      maxWait: 60000
      # 配置检测可以关闭的空闲连接，间隔时间
      timeBetweenEvictionRunsMillis: 60000
      # 配置连接在池中的最小生存时间
      minEvictableIdleTimeMillis: 900000
      # 检测连接是否有，有效得select语句
      validationQuery: SELECT 1 FROM DUAL
      # 申请连接的时候检测，如果空闲时间大于time-between-eviction-runs-millis，执行validationQuery检测连接是否有效，建议配置为true，不影响性能，并且保证安全性。
      testWhileIdle: true
      # 申请连接时执行validationQuery检测连接是否有效，建议设置为false，不然会会降低性能
      testOnBorrow: false
      # 归还连接时执行validationQuery检测连接是否有效，建议设置为false，不然会会降低性能
      testOnReturn: false
      # 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true

      maxPoolPreparedStatementPerConnectionSize: 20
      useGlobalDataSourceStat: true
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=1000
      ########### 启用内置过滤器（第一个 stat必须，否则监控不到SQL） 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 ##########
      filters: stat,wall
      # 自己配置监控统计拦截的filter
      filter:
        # 开启druiddatasource的状态监控
        stat:
          enabled: true
          db-type: mysql
          # 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中
          log-slow-sql: true
          slow-sql-millis: 2000
        # 日志监控，使用slf4j 进行日志输出
        slf4j:
          enabled: true
          statement-log-error-enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      ########## 配置WebStatFilter，用于采集web关联监控的数据 ##########
      web-stat-filter:
        enabled: true                   # 启动 StatFilter
        url-pattern: /*                 # 过滤所有url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" # 排除一些不必要的url
        session-stat-enable: true       # 开启session统计功能
        session-stat-max-count: 1000    # session的最大个数,默认100
      ########## 配置StatViewServlet（监控页面），用于展示Druid的统计信息 ##########
      stat-view-servlet:
        enabled: true                   # 启用StatViewServlet
        url-pattern: /druid/*           # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        reset-enable: false              # 不允许清空统计数据,重新计算
        login-userName: root            # 配置监控页面访问密码
        login-password: 123
        allow: work01.server.com           # 允许访问的地址，如果allow没有配置或者为空，则允许所有访问
        deny:                                        # 拒绝访问的地址，deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝

  #reids配置
  # Redis数据库索引（默认为0）
  redis:
    database: 0
    # Redis服务器地址
    host: work01.redis.server.com
    # Redis服务器连接端口
    port: 36379
    # Redis服务器连接密码（默认为空）
    password: QWER@123456
    lettuce:
      pool:
        #连接池最大连接数（使用负值表示没有限制）
        max-active: 100
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 0


# mybatis plus
mybatis-plus:
  #注意：一定要对应mapper映射xml文件的所在路径
  mapper-locations:
    # classpath* 代表扫描全局,也就是所有的子模块,
    # ** 代表中间不管有多少级目录,最终找到mapper,找到任意名称的xml文件
    - classpath*:mapper/**/*.xml
  # 主键类型
  global-config:
    #0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 1
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 0
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    # 数据库大写下划线转换
    #capital-mode: true
  #自定义SQL注入器
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: true
    # mybatis-plus配置控制台打印完整带参数SQL语句
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

